import Data.Char

soma x y = x+y

------------------------------------------------------------

iguais3 x y z | x == y && x == z = 3
	      | (x == y && x /= z) || (x /= y && x == z) = 2
	      | otherwise = 0

------------------------------------------------------------

max3 x y z | x == y && x == z = x
	   | x > y && x > z = x
	   | y > x && y > z = y
	   | otherwise = z

------------------------------------------------------------

interior xs = init (tail xs) 

------------------------------------------------------------

final n xs = drop (length xs - n) xs

------------------------------------------------------------

segmento n m xs = drop (n-1) (take m xs)

------------------------------------------------------------

neglist xs = length (filter (<0) xs)

------------------------------------------------------------

somaImpares xs = sum (filter odd xs)

------------------------------------------------------------

somaQuadrados n = sum [x^2 | x<-[1..n]]

------------------------------------------------------------

divisores n = [x | x<-[1..n-1], mod n x == 0]

------------------------------------------------------------

fact n = product [1..n]

------------------------------------------------------------

interseccao xs ys = [x | x<-xs, y<-ys, x==y]

------------------------------------------------------------

capitalises xs = map toUpper xs

------------------------------------------------------------

todosPrefixos xs = [] : [take n xs | n <- [1..length xs]] 

------------------------------------------------------------

todosSufixos xs = [] : [final n xs | n <- [1..length xs]]

------------------------------------------------------------

abundante n | (sum (divisores n)) > n = True
	    | otherwise = False

------------------------------------------------------------

abundantesMenores n = [x | x<-[1..n], sum (divisores x) > x]

------------------------------------------------------------

somaConsecutivos [] = []
somaConsecutivos [x] = []
somaConsecutivos (x:y:xs) = x + y : somaConsecutivos (y:xs)

------------------------------------------------------------

subconjunto [] ys = True
subconjunto (x:xs) ys | elem x ys = subconjunto xs ys
		      | otherwise = False

------------------------------------------------------------

inserir x [] = [x]
inserir x (y:ys) | x < y = x : (y:ys)
		 | otherwise = y : inserir x ys

------------------------------------------------------------

remove y [] = []
remove y (x:xs) | x == y = xs
		| otherwise = x : remove y xs

------------------------------------------------------------

frequencia x [] = 0
frequencia x (y:ys) | y == x = frequencia x ys + 1
		    | otherwise = frequencia x ys

------------------------------------------------------------

inverteFold xs = foldr(\x acc -> acc ++ [x]) [] xs

------------------------------------------------------------

mapFold f xs = foldr (\x acc -> [f x] ++ acc) [] xs

------------------------------------------------------------

removeLista xs ys = foldr(\x acc -> if elem x xs then acc else [x] ++ acc) [] ys

------------------------------------------------------------

remdups xs = foldr(\x acc -> if elem x acc then acc else [x] ++ acc) [] xs

------------------------------------------------------------

concatenaFold xss = foldr(\x acc -> x ++ acc) [] xss

------------------------------------------------------------

paridadeFold xs = foldr(\x acc -> if x then not acc else acc) True xs

------------------------------------------------------------

duplicarFold xs = foldr(\x acc -> if elem x vogais then x:x:acc else x:acc) [] xs
	where vogais = ['a','e','i','o','u','A','E','I','O','U']

------------------------------------------------------------

filtraAplicaFold f p xs = foldr(\x acc -> if p x then f x : acc else acc) [] xs

------------------------------------------------------------



------------------------------------------------------------



------------------------------------------------------------



------------------------------------------------------------



------------------------------------------------------------



------------------------------------------------------------



------------------------------------------------------------



------------------------------------------------------------



------------------------------------------------------------



------------------------------------------------------------



------------------------------------------------------------



------------------------------------------------------------



------------------------------------------------------------



------------------------------------------------------------
